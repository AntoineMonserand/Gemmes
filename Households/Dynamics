function [numSectors,t,X,inf,iota,r,A,nu] = Dynamics(tInitial,tFinal,numSteps,Sector_Matrix,Domestic_Vector,Foreign_Vector)

%-------------------------------------------------------------------------
% Initialization
%-------------------------------------------------------------------------

%.........................................................................
% Temporality 

t                   = zeros(1,numSteps+1);
h                   =(tFinal-tInitial)/numSteps;        
t(1)                = tInitial;


%.........................................................................
% Sectorial variables 

numSectors          = size(Sector_Matrix,1);


% Memory allocation 

K       			= zeros(numSectors,numSteps+1);
al          		= zeros(numSectors,numSteps+1);
theta           	= zeros(numSectors,numSteps+1);
p               	= zeros(numSectors,numSteps+1);
ind_n_tax           = zeros(numSectors,numSteps+1);
p_m                 = zeros(numSectors,numSteps+1);

Id_M            	= eye(numSectors);
I_M                 = ones(numSectors,numSteps+1);
I_VS                = ones(numSectors,1);


% Initialization 

K(:,1)              = Sector_Matrix(:,1);
al(:,1)             = Sector_Matrix(:,2);
theta(:,1)          = Sector_Matrix(:,3);
d_c_init            = Sector_Matrix(:,4);
p(:,1)              = Sector_Matrix(:,5);
ind_n_tax(:,1)      = Sector_Matrix(:,6);
n_tax_c             = Sector_Matrix(:,7);
nu                  = Sector_Matrix(:,8);
delta               = Sector_Matrix(:,9);
eta                 = Sector_Matrix(:,10);
mu                  = Sector_Matrix(:,11);
zeta                = Sector_Matrix(:,12);
a                   = Sector_Matrix(:,13);
b                   = Sector_Matrix(:,14);
gamma               = Sector_Matrix(:,15);
A                   = Sector_Matrix(:,16:15+numSectors);


%.........................................................................
% Domestic variables

% Memory allocation 

Q           		= zeros(numSectors,numSteps+1);
Y               	= zeros(numSectors,numSteps+1);
%G               	= zeros(numSectors,numSteps+1);
%T_c               	= zeros(numSectors,numSteps+1);
D_c                 = zeros(numSectors,numSteps+1); 
%T_h               	= zeros(1,numSteps+1);
D_h                 = zeros(1,numSteps+1);
D_g                 = zeros(1,numSteps+1);
w                   = zeros(1,numSteps+1);
N           		= zeros(1,numSteps+1);
tau_h               = zeros(1,numSteps+1);


% Initalization

omega_init        	= Domestic_Vector(1);
lambda_init         = Domestic_Vector(2);
alpha       		= Domestic_Vector(3);
beta            	= Domestic_Vector(4);
m_i                 = Domestic_Vector(5);
sigma       		= Domestic_Vector(6);
phi0            	= Domestic_Vector(7);
phi1            	= Domestic_Vector(8);
rstar               = Domestic_Vector(9);
istar               = Domestic_Vector(10);
u           		= Domestic_Vector(11);
phi_T           	= Domestic_Vector(12);
d_h_init           	= Domestic_Vector(13);
n_tax_h             = Domestic_Vector(15);
tau_h(1)            = Domestic_Vector(16);
Cap_Adj_Sp          = Domestic_Vector(17);
Q(:,1)          	= K(:,1)./nu;	
Y(:,1)              = (Id_M - A)*Q(:,1);
D_c(:,1)      		= d_c_init.*p(:,1).*Y(:,1);
p_m(:,1)            = (I_VS + ind_n_tax(:,1)).*p(:,1);
D_h(1)      		= d_h_init*sum(p_m(:,1).*Y(:,1)); 
D_g(1)              = Domestic_Vector(14);
w(1)        		= omega_init*dot((I_VS+t(:,1)).*p(:,1),Y(:,1))/dot(al(:,1),Q(:,1));
N(1)            	= dot(al(:,1),Q(:,1))/lambda_init;

%.........................................................................
% Foreign economy

% Memory allocation 

B_df                = zeros(1,numSteps+1);


% Intialization

E                   = Foreign_Vector(1);
r_Bf                = Foreign_Vector(2);
B_df(1)             = Foreign_Vector(3);



%.........................................................................
% Initial dynamic vector

X                   = zeros(6*numSectors+6,numSteps+1);
X(:,1)              = [K(:,1)' w(1) al(:,1)' N(1) p(:,1)' ind_n_tax(:,1)' theta(:,1)' D_c(:,1)' D_h(1) D_g(1) B_df(1) tau_h(1)]; 


%-------------------------------------------------------------------------
% Dynamic simulation - Runge-Kutta Algorithm
%-------------------------------------------------------------------------

for i = 1:numSteps
   k1               = h*Dynamic_Increase(X(:,i));
   k2               = h*Dynamic_Increase(X(:,i)+0.5*k1);
   k3               = h*Dynamic_Increase(X(:,i)+0.5*k2); 
   k4               = h*Dynamic_Increase(X(:,i)+k3);
   X(:,i+1)         = X(:,i) + (k1 + 2*k2 + 2*k3 + k4)/6;
   t(i+1)           = tInitial + i*h;
end


%-------------------------------------------------------------------------
% Formating of the output variables
%-------------------------------------------------------------------------

%.........................................................................
% State variable

K                   = X(1:numSectors,:);
w                   = X(numSectors+1,:);
al                  = X(numSectors+2:2*numSectors+1,:);
N                   = X(2*numSectors+2,:);
p                   = X(2*numSectors+3:3*numSectors+2,:);   
ind_n_tax           = X(3*numSectors+3:4*numSectors+2,:);   
theta               = X(4*numSectors+3:5*numSectors+2,:);   
D_c                 = X(5*numSectors+3:6*numSectors+2,:);
D_h                 = X(6*numSectors+3,:);
t                   = t';


%.........................................................................
% Inflation and interest rate

p_m                 = (I_M + ind_n_tax).*p;
CPI                 = zeta'*p_m;
p_m_fw              = [p_m(:,2:numSteps+1) I_VS];
inf                 = (1/h)*zeta'*(p_m_fw - p_m)./CPI;
inf(numSteps+1)     = 2*inf(numSteps) - inf(numSteps-1);  
iota                = rstar + inf + phi_T*(inf-istar);
r                   = (iota + sqrt(iota.^2 + u^2))/2;

%-------------------------------------------------------------------------
% Auxiliary function - Increase of state variable calculation
%-------------------------------------------------------------------------

% Function relating the right-hand side of the differential equation (to be changed accordingly to the problem at hand)
function [dX] = Dynamic_Increase(X)

%.........................................................................   
% Definition of auxiliary variables 

K                   = X(1:numSectors);
w                   = X(numSectors+1);
al                  = X(numSectors+2:2*numSectors+1);
N                   = X(2*numSectors+2);
p                   = X(2*numSectors+3:3*numSectors+2);   
ind_n_tax           = X(3*numSectors+3:4*numSectors+2);   
theta               = X(4*numSectors+3:5*numSectors+2);   
D_c                 = X(5*numSectors+3:6*numSectors+2); 
D_h                 = X(6*numSectors+3);
D_g                 = X(6*numSectors+4);
B_df                = X(6*numSectors+5);
tau_h               = X(6*numSectors+6);


%.........................................................................
% Production

Q                   = K./nu;
Y                   = (Id_M - A)*Q;
p_m                 = (I_VS + ind_n_tax).*p;
GDP                 = sum(p_m.*Y);
c                   = A'*p + w*al;

.........................................................................
% Dynamics of inflation 

d_ind_n_tax         = zeros(numSectors,1);
d_p                 = eta.*(mu.*c - p);
d_p_m               = (I_VS + ind_n_tax).*d_p + d_ind_n_tax.*p;    
CPI                 = sum(zeta.*(I_VS+ind_n_tax).*p);
inf                 = dot(zeta,d_p_m)/CPI;
iota                = rstar + inf + phi_T*(inf - istar);
r                   = (iota + sqrt(iota^2 + u^2))/2;


%.........................................................................
% Firms

Pi_gr               = (p - c).*Q;
r_s_gr              = Pi_gr./(p(1)*K(1));
pi_gr               = sum(Pi_gr)/dot(p,Y);
f_pi_gr             = -0.0065 + exp(-5)*exp(20*pi_gr);
T_c                 = n_tax_c.*(Pi_gr - r*D_c);
Pi                  = Pi_gr - r*D_c - T_c;


%.........................................................................
% Dynamics of households                                           

L                   = al.*Q;
Inc                 = w*sum(L) - r*D_h;
T_h                 = n_tax_h*Inc;
C                   = (a + Inc*b - T_h)./p_m;
d_D_h               = max(sum(p_m.*C)- Inc,-D_h); %!!!!!!!!!!!!!!!!!!!!!!!
lambda              = sum(L)/N;
phi_lambda          = - phi0 + phi1/(1-lambda)^2;
d_w                 = (phi_lambda + m_i*inf)*w;

%.........................................................................
% Dynamics of the governement

r_Bd                = max((D_g/GDP)/40 + r,0.2); %!!!!!!!!!!!!!!!!!!!!!!!
d_B_dd              = tau_h*Inc;
d_tau_h             = Cap_Adj_Sp*(r_Bd - E*r_Bf);
d_B_df              = Cap_Adj_Sp*B_df*(r_Bd - E*r_Bf);
d_D_g               = max(d_B_dd + d_B_df,-D_g);
G_s                 = 0.3*Q;
G_k                 = (d_D_g - sum(p_m.*G_s) + T_h + sum(T_c) - r_Bd*D_g)/p(1);


%.........................................................................
% Dynamics of capital

Inv                 = f_pi_gr*Y(1)*theta + gamma.*G_k;
d_K                 = Inv - delta.*K;
d_D_c               = Inv - Pi;
d_theta          	= zeros(numSectors,1);
for k = 1:numSectors
    d_theta(k)      = sigma*theta(k)*dot(theta,r_s_gr(k)*I_VS - r_s_gr);
end


%.........................................................................
% Dynamics of remaining output variables

d_al                = -alpha.*al;
d_N                 = beta*N;


%.........................................................................
% Blending of the output vector

dX                  = [d_K' d_w' d_al' d_N' d_p' d_ind_n_tax' d_theta' d_D_c' d_D_h d_D_g d_B_df d_tau_h]';

end
end
