%-------------------------------------------------------------------------
% Simulation inputs
%-------------------------------------------------------------------------

%.........................................................................
% Temporality

tic
periods                 = 60;
numSteps                = 100*periods;

%.........................................................................
% Initial state of sectors (conditions and parameters)
 
% Sector 1 � Investment

Sector_1_Vector  = 		...
    [0.5				... 	% K_i_init
     0.5				... 	% al_init
	 0.5				... 	% theta_i_init
	 0.5				... 	% d_c_i_init 
	 1.0	 			... 	% p_i_init
	 0.2 				... 	% ind_n_tax_i_init
     0.1                ...     % n_tax_i
	 10  				... 	% nu_i
	 0.01           	... 	% delta_i
	 0.05               ... 	% eta_p_i
	 1.31	 			... 	% mu_i
	 0.5				... 	% zeta_i
     0.0                ...     % a_i 
     0.0                ...     % b_i
     0.3                ...     % gamma_i --> sum must equal 1
   	 0.1 				... 	% a_i1 --> To adapt
     0.01];                     % a_i2 --> To adapt                         

	 
% Sector 2 � Rest of the economy

Sector_2_Vector  = 		...
    [0.5		 		... 	% K_i_init
     0.5			 	... 	% al_i_init
	 0.5				... 	% theta_i_init
	 0.5				... 	% d_c_i_init
	 1.0				... 	% P_i_init
	 0.1				... 	% ind_n_tax_i_init
     0.2                ...     % n_tax_i
	 10 				... 	% nu_i
	 0.01				... 	% delta_i
	 0.04                  ... 	% eta_p_i
	 1.31				... 	% mu_i
	 0.5				...     % zeta_i
     0.3                ...     % a_i 
     0.4                ...     % b_i 
     0.3                ...     % gamma_i --> sum must equal 1
	 0.02				... 	% a_i1 --> To adapt
     0.05];                     % a_i2 --> To adapt     
                          

% Initial state of sectors� matrix

Sector_Matrix = [Sector_1_Vector ; Sector_2_Vector];


%.........................................................................
% Initial state of the economy (conditions and parameters)

Domestic_Vector  = 	...
    [0.8 				... 	% omega_init
     0.9 				... 	% lamda_init
	 0.025      		... 	% alpha
	 0.02               ... 	% beta
	 0.8 				... 	% m_i (monetary illusion)
	 0.1 				... 	% sigma
	 0.04/(1-0.04^2)	... 	% phi0
	 0.04^3/(1-0.04^2)	... 	% phi1
	 0.04				... 	% rstar
	 0.01 				... 	% istar
	 9.8813e-324		... 	% u
	 0.5                ...     % phi_T
     0.0                ...     % d_h_init
     0.0                ...     % D_g_init   
     0.3                ...     % n_tax__h_init
     0.1                ...     % tau_h_init
     0.2];                      % cap_adju_speed

 
%.........................................................................
% Initial state of the economy (conditions and parameters)

Foreign_Vector  = 	...
    [1    				... 	% E
     0.03 				... 	% r_Bf_init
     0.5];                      % B_df_init

 
%-------------------------------------------------------------------------
% Simulation outputs
%-------------------------------------------------------------------------

[numSectors,t,X,inf,iota,r,A,nu] = Dynamics(0, periods, numSteps,Sector_Matrix,Domestic_Vector,Foreign_Vector);

%-------------------------------------------------------------------------
% Aggregated variables calculation
%-------------------------------------------------------------------------

%.........................................................................
% Initialization

K                    = X(1:numSectors,:);
w                    = X(numSectors+1,:);
al                   = X(numSectors+2:2*numSectors+1,:);
N                    = X(2*numSectors+2,:);
p                    = X(2*numSectors+3:3*numSectors+2,:);   
ind_n_tax            = X(3*numSectors+3:4*numSectors+2,:);   
theta                = X(4*numSectors+3:5*numSectors+2,:);   
D_c                  = X(5*numSectors+3:6*numSectors+2,:);
D_h                  = X(6*numSectors+3,:);
D_g                  = X(6*numSectors+4,:);
D                    = sum(D_c) + D_h + D_g;
X = X';

%.........................................................................
% Calculation 

Id_M            	= eye(numSectors);
I_M                 = ones(numSectors,numSteps+1);
I_VS                = ones(numSectors,1);
I_VT                = ones(numSteps+1,1);

N                   = N';
w                   = w';
inf                 = inf';
Q                 	= K./(nu*I_VT');
L                   = al.*Q;
Y                   = (Id_M - A)*Q;
p_m                 = (I_M + ind_n_tax).*p;
GDP                 = sum(p_m.*Y);
c                   = A'*p + (I_VS*w').*al;
omega               = w'.*sum(L)./GDP;
lambda              = sum(L)./N';
d                   = (sum(D_c)+D_h+D_g)./sum(p.*Y);
Pi_gr               = (p - c).*Q;
r_s_gr              = Pi_gr./(I_VS*(p(1,:).*K(1,:)));
pi_gr               = sum(Pi_gr)./sum(p.*Y);


%-------------------------------------------------------------------------
% Simulation figures
%-------------------------------------------------------------------------
 
%.........................................................................
% Phase diagram
 
figure
plot3(omega,lambda,d)
xlabel('\omega')
ylabel('\lambda')
zlabel('d')
 
 
%.........................................................................
% Reduced variables
 
figure
 
subplot(5,2,1);
plot(t,omega,'-')
hold on
plot(t,lambda,'r-')
legend('\omega' , '\lambda')
 
subplot(5,2,2);
plot(t,sum(D_c),'-')
hold on
plot(t,D_h,'r-')
hold on
plot(t,D_g,'g-')
legend('D_c' , 'D_h' , 'D_g')
 
subplot(5,2,3);
plot(omega,lambda,'-')
legend('\omega \lambda trajectory')
 
subplot(5,2,4);
plot(t,w,'-')
legend('w')
 
subplot(5,2,5);
plot(t,d,'-')
legend('d')
 
subplot(5,2,6);
plot(t,pi_gr,'-')
legend('\pi_{gross}')
 
subplot(5,2,7);
plot(t,inf,'-')
legend('inflation (inc. ind. tax)')
 
subplot(5,2,8);
plot(t,r,'-')
legend('r')
 
subplot(5,2,9);
plot(t,Pi_gr(1,:),'-')
hold on
plot(t,Pi_gr(2,:),'r-')
legend('\Pi_1_{gross}' , '\Pi_2_{gross}')
 
subplot(5,2,10);
plot(t,K(1,:),'-')
hold on
plot(t,K(2,:),'r-')
legend('K1' , 'K2')


%.........................................................................
% Final conditions

calculation_time = toc;
Final_conditions{1,1}                  = 'omega';
Final_conditions{2,1}                  = omega(numSteps+1);
Final_conditions{1,2}                  = 'lambda';
Final_conditions{2,2}                  = lambda(numSteps+1);
Final_conditions{1,3}                  = 'd';
Final_conditions{2,3}                  = d(numSteps+1);
Final_conditions{1,4}                  = 'pi gr';
Final_conditions{2,4}                  = pi_gross(numSteps+1);
Final_conditions{1,5}                  = 'r';
Final_conditions{2,5}                  = r(numSteps+1);
Final_conditions{1,6}                  = 'inf';
Final_conditions{2,6}                  = inf(numSteps+1);
Final_conditions{1,7}                  = 'pi banks}';
Final_conditions{2,7}                  = r(numSteps+1)*d(numSteps+1);
Final_conditions{1,8}                  = 'Calc. time';
Final_conditions{2,8}                  = calculation_time;
disp(' ');
disp('Final conditions reached :');
disp(' ');
disp(Final_conditions);



% Reduced variables
%figure
%subplot(5,2,1);
%plot(T,omega,'-')
%legend('\omega')

%subplot(5,2,2);
%plot(omega,lambda,'-')
%legend('\omega \lambda trajectory')

%subplot(5,2,3);
%plot(T,lambda,'-')
%legend('\lambda')

%subplot(5,2,4);
%plot(T,Z(:,3),'-')
%legend('w')

%subplot(5,2,5);
%plot(T,d,'-')
%legend('d')

%subplot(5,2,6);
%plot(T,pi_gross,'-')
%legend('\pi gross')

%subplot(5,2,7);
%plot(T,Z(:,7)./(Z(:,9).*Y_1),'-')
%legend('d_1')

%subplot(5,2,8);
%plot(T,Z(:,8)./(Z(:,10).*Y_2),'-')
%legend('d_2')

%subplot(5,2,9);
%plot(T,Pi_1_gross./(Z(:,9).*Y_1),'-')
%legend('\pi_1_gross')

%subplot(5,2,10);
%plot(T,Pi_2_gross./(Z(:,10).*Y_2),'-')
%legend('\pi_2_gross')

% Aggregated variables
%figure
%subplot(5,2,1);
%plot(T,Y_1,'-')
%legend('Y_1')

%subplot(5,2,2);
%plot(T,Y_2,'-')
%legend('Y_2')

%subplot(5,2,3);
%plot(T,Z(:,9).*Y_1,'-')
%legend('p_1_gross.Y_1')

%subplot(5,2,4);
%plot(T,Z(:,10).*Y_2,'-')
%legend('p_2_gross.Y_2')

%subplot(5,2,5);
%plot(T,Z(:,1),'-')
%legend('K_1')

%subplot(5,2,6);
%plot(T,Z(:,2),'-')
%legend('K_2')

%subplot(5,2,7);
%plot(T,Z(:,7),'-')
%legend('D_1')

%subplot(5,2,8);
%plot(T,Z(:,8),'-')
%legend('D_2')

%subplot(5,2,9);
%plot(T,Pi_1_gross,'-')
%legend('Pi_1_gross')

%subplot(5,2,10);
%plot(T,Pi_2_gross,'-')
%legend('Pi_2_gross')

%Prices and investment
%figure
%subplot(5,2,1);
%plot(T,Z(:,9),'-')
%legend('p_1')

%subplot(5,2,2);
%plot(T,Z(:,10),'-')
%legend('p_2')

%subplot(5,2,3);
%plot(T,inf,'-')
%legend('inflation (inc. ind. tax)')

%subplot(5,2,4);
%plot(T,Z(:,9)./Z(:,10),'-')
%legend('p_1/p_2')

%subplot(5,2,5);
%plot(T,r,'-')
%legend('r')

%subplot(5,2,6);
%plot(T,iota,'-')
%legend('iota')

%subplot(5,2,7);
%plot(T,r_1,'-')
%legend('r_1')

%subplot(5,2,8);
%plot(T,r_2,'-')
%legend('r_2')

%subplot(5,2,9);
%plot(T,Z(:,11),'-')
%legend('\theta_1')

%subplot(5,2,10);
%plot(T,Z(:,12),'-')
%legend('\theta_2')%

% Wage and profit shares --> EB : TBU avec ind. tax
%figure
%subplot(5,2,1);
%plot(T,Z(:,3).*L_1./(Z(:,9).*Y_1),'-')
%legend('wL_1/p_1Y_1')

%subplot(5,2,2);
%plot(T,Z(:,3).*L_2./(Z(:,10).*Y_2),'-')
%legend('wL_2/p_2Y_2')

%subplot(5,2,3);
%plot(T,L_1./(L_1 + L_2),'-')
%legend('L_1/L')

%subplot(5,2,4);
%plot(T,L_2./(L_1 + L_2),'-')
%legend('L_2/L')

%subplot(5,2,5);
%plot(T,(Z(:,9).*Y_1)./GDP,'-')
%legend('p_1Y_1/GDP')

%subplot(5,2,6);
%plot(T,(Z(:,10).*Y_2)./GDP,'-')
%legend('p_2Y_2/GDP')

%subplot(5,2,7);
%plot(T,Z(:,1)./(Z(:,1) + Z(:,2)),'-')
%legend('K_1/K')

%subplot(5,2,8);
%plot(T,Z(:,2)./(Z(:,1) + Z(:,2)),'-')
%legend('K_2/K')

%subplot(5,2,9);
%plot(T,Z(:,7)./(Z(:,7) + Z(:,8)),'-')
%legend('D_1/D')

%subplot(5,2,10);
%plot(T,Z(:,8)./(Z(:,7) + Z(:,8)),'-')
%legend('D_2/D')

% Prices --> EB : TBU avec ind. tax
%figure
%subplot(5,2,1);
%plot(T,Pi_1./(Pi_1+Pi_2),'-')
%legend('Pi_1_gross/Pi')

%subplot(5,2,2);
%plot(T,Pi_2./(Pi_1+Pi_2),'-')
%legend('Pi_2_gross/Pi')

%subplot(5,2,3);
%plot(T,Y_1./Q_1,'-')
%legend('Y_1/Q_1')

%subplot(5,2,4);
%plot(T,Y_2./Q_2,'-')
%legend('Y_2/Q_2')

%subplot(5,2,5);
%plot(T,Z(:,9)./c_1,'-')
%legend('p_1/c_1=mu_1*')

%subplot(5,2,6);
%plot(T,Z(:,10)./c_2,'-')
%legend('p_2/c_2=mu_2*')

